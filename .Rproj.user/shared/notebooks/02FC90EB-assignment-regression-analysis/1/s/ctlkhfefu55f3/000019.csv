"0","## Splitting the data set y into Training and testing data set."
"0","split_Y<-initial_split(data = as.data.frame(Y),prop=.7)"
"0","## Training split Y data set "
"0","Y_training_set<-training(split_Y)"
"0","Y_testing_set<-as.matrix(testing(split_Y))"
"0",""
"0","Y_training_data<-as.matrix(Y_training_set)"
"0",""
"0","## Splitting the data set of X into Training and testing data set."
"0","split_X<-initial_split(data = as.data.frame(X),prop=.7)"
"0","## Training split X data set"
"0","X_training_set<-training(split_X)"
"0","## Testing split Y data set "
"0","X_testing_set<-as.matrix(testing(split_X))"
"0","X_testing_data<-as.matrix(X_testing_set)"
"0","X_training_data<-as.matrix(X_training_set)"
"0",""
"0","# Create raw training predictors for model 5"
"0","X_train_model_raw <- cbind("
"0","  x4 = X_training_set[,""x4""],"
"0","  x1_sq = X_training_set[,""x1""]^2,"
"0","  x3_sq = X_training_set[,""x3""]^2"
"0",")"
"0",""
"0","# Apply scaling"
"0","X_train_scaled <- scale(X_train_model_raw)"
"0",""
"0","# Save scaling parameters"
"0","center_vals <- attr(X_train_scaled, ""scaled:center"")"
"0","scale_vals  <- attr(X_train_scaled, ""scaled:scale"")"
"0",""
"0","# Create final training matrix with intercept"
"0","training_ones <- matrix(1, nrow(X_train_scaled), 1)"
"0","X_traning_model <- cbind(training_ones, X_train_scaled)"
"0",""
"0","# Estimate thetahat"
"0","traning_thetahat <- solve(t(X_traning_model) %*% X_traning_model) %*% "
"0","                    t(X_traning_model) %*% Y_training_data"
"0",""
"0","# === Apply same scaling to test set === #"
"0","X_test_model_raw <- cbind("
"0","  x4 = X_testing_set[,""x4""],"
"0","  x1_sq = X_testing_set[,""x1""]^2,"
"0","  x3_sq = X_testing_set[,""x3""]^2"
"0",")"
"0",""
"0","# Apply the same centering and scaling from training set"
"0","X_test_scaled <- scale(X_test_model_raw, center = center_vals, scale = scale_vals)"
"0",""
"0","# Final test matrix"
"0","test_ones <- matrix(1, nrow(X_test_scaled), 1)"
"0","X_test_model <- cbind(test_ones, X_test_scaled)"
"0",""
"0","### Estimating model parameters using Training set"
"0","#training_ones=matrix(1 , length(X_training_set$x1),1)"
"0","# selected model 2 and using equation of model 5"
"0","#X_training_model<-cbind(training_ones,X_training_set[,""x4""],(X_training_set[,""x1""])^2,(X_training_set[,""x3""])^2)"
"0",""
"0","traning_thetahat=solve(t(X_traning_model) %*% X_traning_model) %*% t(X_traning_model) %*%  Y_training_data"
"0","  "
"0","### Model out/Prediction"
"0","Y_testing_hat = X_test_model  %*% traning_thetahat"
"0","head(Y_testing_hat)"
"1","    "
"1","        y"
"1","
[1,]"
"1"," 454.7333"
"1","
[2,]"
"1"," 454.6793"
"1","
[3,]"
"1"," 454.0735"
"1","
[4,]"
"1"," 454.3889"
"1","
[5,]"
"1"," 453.8955"
"1","
[6,]"
"1"," 455.0354"
"1","
"
"0","RSS_testing <- sum((Y_testing_set-Y_testing_hat)^2)"
"0","head(RSS_testing)"
"1","[1]"
"1"," 861812.7"
"1","
"
"0","t.test(X_traning_model, mu=500, alternative=""two.sided"", conf.level=0.95)"
"1","
"
"1","	One Sample t-test"
"1","
"
"1","
"
"1","data:  "
"1",""
"1","X_traning_model"
"1",""
"1","
"
"1","t = -84480, df = 26787, p-value < 2.2e-16"
"1","
"
"1","alternative hypothesis: "
"1","true "
"1",""
"1","mean"
"1",""
"1"," is "
"1",""
"1","not equal to"
"1",""
"1"," "
"1",""
"1","500"
"1",""
"1","
"
"1","95"
"1",""
"1"," percent confidence interval:
"
"1",""
"1"," "
"1",""
"1","0.2384051 0.2615949"
"1",""
"1","
"
"1","sample estimates:
"
"1","mean of x "
"1","
"
"1","     0.25 "
"1","
"
"1","
"
"0","C_I1=-0.2783950"
"0","C_I2=0.2762101"
"0","p2 <- plot(density(X_traning_model), col=""green"", lwd=2,"
"0","           main=""Distribution of Traning Data"")"
